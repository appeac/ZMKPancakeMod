/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define DEF 0
#define NBR 1
#define NAV 2
#define FNC 3

/*
blank_layer {
            bindings = <
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
            >;
        };
		#
*/

/ {
	behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <175>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
		
		td_cw: tap_dance_cw {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LSHIFT &caps_word>, <&kp CAPS>;
        };		
    };
	
	macros {
        m_ctrl_bcps: m_ctrl_bcps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp BSPC>
                , <&macro_release &kp LCTRL>
				;
        };
		
		m_parens: m_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LPAR>
                , <&macro_tap &kp RPAR>
                , <&macro_tap &kp LEFT>
				;
        };
		
		m_crlybs: m_crlybs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBRC>
                , <&macro_tap &kp RBRC>
                , <&macro_tap &kp LEFT>
				;
        };
		
		m_sqbs: m_sqbs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LBKT>
                , <&macro_tap &kp RBKT>
                , <&macro_tap &kp LEFT>
				;
        };
		
		m_ltgt: m_ltbt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT>
                , <&macro_tap &kp GT>
                , <&macro_tap &kp LEFT>
				;
        };
    };
	
	combos {
        compatible = "zmk,combos";

        combo_ctrl_bspc {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <10 11>; // Positions of the keys in the matrix
            bindings = <&kp LC(BSPC)>; // Output when combo is triggered
        };
		
		combo_soft_off {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <36 47>; // Positions of the keys in the matrix
            bindings = <&soft_off>; // Output when combo is triggered
        };
		
		combo_tilde {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <0 1>; // Positions of the keys in the matrix
            bindings = <&kp TILDE>; // Output when combo is triggered
        };
		
		combo_excl {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <1 2>; // Positions of the keys in the matrix
            bindings = <&kp EXCL>; // Output when combo is triggered
        };
		
		combo_at {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <2 3>; // Positions of the keys in the matrix
            bindings = <&kp AT>; // Output when combo is triggered
        };
		
		combo_hash {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <3 4>; // Positions of the keys in the matrix
            bindings = <&kp HASH>; // Output when combo is triggered
        };
		
		combo_dollar {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <4 5>; // Positions of the keys in the matrix
            bindings = <&kp DOLLAR>; // Output when combo is triggered
        };
		
		combo_perc {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <5 6>; // Positions of the keys in the matrix
            bindings = <&kp PERCENT>; // Output when combo is triggered
        };
		
		combo_caret {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <6 7>; // Positions of the keys in the matrix
            bindings = <&kp CARET>; // Output when combo is triggered
        };
		
		combo_amps {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <7 8>; // Positions of the keys in the matrix
            bindings = <&kp AMPS>; // Output when combo is triggered
        };
		
		combo_star {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <8 9>; // Positions of the keys in the matrix
            bindings = <&kp STAR>; // Output when combo is triggered
        };
		
		combo_lpar {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <9 10>; // Positions of the keys in the matrix
            bindings = <&kp LPAR>; // Output when combo is triggered
        };
		
		combo_rpar {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <10 11>; // Positions of the keys in the matrix
            bindings = <&kp RPAR>; // Output when combo is triggered
        };
		
		combo_bootloader {
            timeout-ms = <50>; // Detection window in milliseconds
            key-positions = <0 11 36 47>; // Positions of the keys in the matrix
            bindings = <&bootloader>; // Output when combo is triggered
        };
    };
	
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC     AS(Q)       AS(W)       AS(E)       AS(R)       AS(T)       	AS(Y)      		 AS(U)       AS(I)       AS(O)         AS(P)       		&kp BSPC
                &kp TAB     AS(A)       AS(S)       AS(D)       AS(F)       AS(G)       	AS(H)       	 AS(J)       AS(K)       AS(L)         AS(SEMI)    		AS(SQT)
                &td_cw      AS(Z)       AS(X)       AS(C)       AS(V)       AS(B)       	AS(N)     	     AS(M)       AS(COMMA)   AS(DOT)  	   AS(SLASH)  	    &kp DEL
                &kp LCTRL   &kp LGUI    &kp LALT    &mo FNC     &mt LALT DEL    &lt 1 SPACE     &lt 2 ENTER      &mo NAV     &kp RALT    &kp C_VOL_DN  &kp C_VOL_UP     &kp LA(TAB)
            >;
        };

        number_layer {
            bindings = <
                &trans      &trans      &trans      &trans      &trans      &trans      &kp KP_NUM      AS(N7)   AS(N8)   AS(N9)   AS(MINUS)      AS(EQUAL)
                &trans      &trans      &trans      &trans      &trans      &trans      &kp KP_ASTERISK AS(N4)   AS(N5)   AS(N6)   &kp PLUS       AS(BSLH)
                &trans      &trans      &trans      &trans      &trans      &trans      &kp KP_SLASH    AS(N1)   AS(N2)   AS(N3)   &m_parens      &m_sqbs
                &trans      &trans      &trans      &trans      &trans      &trans      &trans          AS(N0)   &none    &kp DOT  &m_ltgt        &m_crlybs      
			>;
        };

        nav_layer {
            bindings = <
				&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &kp UP    &trans     &trans   &kp PG_UP
				&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp END  &kp PG_DN
				&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans     &trans   &trans
				&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans     &trans   &trans
            >;
        };

        function_layer {
            bindings = <
                &bootloader   &trans        &trans          &trans          &trans          &trans          &trans      &kp F10     &kp F11     &kp F12  &trans      &trans
                &trans        &trans        &trans          &trans          &trans          &trans          &trans      &kp F7      &kp F8      &kp F9   &trans      &trans
                &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans      &kp F4      &kp F5      &kp F6   &trans      &trans
                &out OUT_BLE  &out OUT_USB  &out OUT_TOG    &trans          &trans          &trans          &trans      &kp F1      &kp F2      &kp F3   &trans      &trans
            >;
        };
    };
};
